#!/bin/bash

# This function generates c code to create a sentinel struct
# A sentinel struct has an id (column id 0 for every database) of -1 and all other complex data types are not alloc'd or null
#Args: none
genCodeCreateStruct(){
	echo "struct $structName* createStruct_$dbObjNum(){"
	echo "	// Vars"
	echo "	char* FF = (char*) __func__;"
	echo "	struct $structName* returnStruct;"
	echo ""

	echo "	// Getting Values------------------------------------------------------------------"
	echo "	if (memberNames == NULL){ memberNames = getTableInfo(\"$csvLoc\", $colNameColTypeListColNum);}"
	echo "	if (memberNames == NULL){ myPerror($F_creatStruct, FF, \"getTableInfo() function returned a null value. Returning null\"); return NULL;}"
	echo ""
	echo "	if (dataTypes == NULL){ dataTypes = getTableInfo(\"$csvLoc\", $dataTypesColTypeListColNum);}"
	echo "	if (dataTypes == NULL){"
	echo "		myPerror($F_creatStruct, FF, \"getTableInfo() function returned a null value. Returning null\");"
	echo "		myFree(memberNames);"
	echo "		return NULL;"
	echo "	}"
	echo ""
	echo "	if (defaultVals == NULL){ defaultVals = getTableInfo(\"$csvLoc\", $defaultValColTypeListColNum);}"
	echo "	if (defaultVals == NULL){"
	echo "		myPerror($F_creatStruct, FF, \"getTableInfo() function returned a null value. Returning null\");"
	echo "		myFree(memberNames); myFree(dataTypes);"
	echo "		return NULL;"
	echo "	}"
	echo ""
	echo "	returnStruct = malloc(sizeof(struct $structName));"
	echo "	//---------------------------------------------------------------------------------"
	echo ""

	echo "	// Iterative over every member of struct and adding default values"
	echo "	for (int i = 0; i < getArrSize(memberNames); i++){"
	echo "		void* valAsVoidPtr;"
	echo "		if (strcmp(dataTypes[i], \"string\") != 0){"
	echo "			if (strcmp(dataTypes[i], \"bool\") == 0){"
	echo "				valAsVoidPtr = convertBasic(defaultVals[i], \"int\");"
	echo "				if (valAsVoidPtr == NULL){"
	echo "					myPerror($F_creatStruct, FF, \"convertBasic() function returned a null value. Returning null\");"
	echo "					myFree(memberNames); myFree(dataTypes); myFree(defaultVals); free(returnStruct);"
	echo "					return NULL;"
	echo "				}"
	echo "			}"
	echo "			else if (strcmp(dataTypes[i], \"char\") == 0){"
	echo "				valAsVoidPtr = &defaultVals[i][0];"
	echo "			}"
	echo "			else{"
	echo "				valAsVoidPtr = convertBasic(defaultVals[i], dataTypes[i]);"
	echo "				if (valAsVoidPtr == NULL){"
	echo "					myPerror($F_creatStruct, FF, \"convertBasic() function returned a null value. Returning null\");"
	echo "					myFree(memberNames); myFree(dataTypes); myFree(defaultVals); free(returnStruct);"
	echo "					return NULL;"
	echo "				}"
	echo "			}"
	echo "		}"
	echo "		else{ valAsVoidPtr = defaultVals[i];}"
	echo ""
	echo "		int setStructValReturnVal = setStructMemberVal_$dbObjNum(returnStruct, memberNames[i], valAsVoidPtr);"
	echo "		if (setStructValReturnVal != 0){"
	echo "			myPerror($F_creatStruct, FF, \"setStructMemberVal() function returned an error value (!=0). Returning null\");"
	echo "			myFree(memberNames); myFree(dataTypes); myFree(defaultVals); myFree(returnStruct);"
	echo "			return NULL;"
	echo "		}"
	echo "	}"
	echo ""
	echo "	return returnStruct;"
	echo "}"

	return 0
}

